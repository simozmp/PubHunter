package logic.dao.implementation;

import logic.dao.TableServiceDAO;
import logic.exception.DAOException;
import logic.model.TableService;
import logic.model.User;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class TableServiceDAOImpl extends DAOImpl implements TableServiceDAO {
    @Override
    public void insert(TableService tableService) throws DAOException {

        this.connect();

        String query = "INSERT INTO table_services(opened_date, opened_time, closed_date, closed_time, " +
                "restaurant_fk, table_fk, user_fk) values (?,?,?,?,?,?,?)";

        try(PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            prepareStatementForTableService(tableService, preparedStatement);

            if(tableService.getCustomer() instanceof User userCustomer)
                preparedStatement.setString(7, userCustomer.getEmailAddress().toString());
            else
                preparedStatement.setString(6, null);

            preparedStatement.executeUpdate();
        } catch (SQLException e) {
            throw new DAOException("SQLException in TableServiceDAO with message: " + e.getMessage());
        } finally {
            this.disconnect();
        }

        this.disconnect();

        this.connect();

        query = "SELECT id FROM table_services WHERE " +
                "opened_date = ? AND " +
                "opened_time = ? AND " +
                "closed_date = ? AND " +
                "closed_time = ? AND " +
                "restaurant_fk = ? AND " +
                "table_fk = ?";

        try(PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            prepareStatementForTableService(tableService, preparedStatement);

            ResultSet resultSet = preparedStatement.executeQuery();

            if(resultSet.next())
               tableService.setRecordId(resultSet.getInt("id"));

        } catch (SQLException e) {
            throw new DAOException("Error while binding tableService to the written record. " +
                    "Message: " + e.getMessage());
        } finally {
            this.disconnect();
        }

        this.disconnect();

        OrderingDAOImpl orderingDAO = new OrderingDAOImpl();

        for(int i=0; i<tableService.getOrderingsCount(); i++)
            orderingDAO.insert(tableService.getOrdering(i));
    }

    /**
     * Prepares a PreparedStatement with data from tableService (opened date, opened time, closed date,
     * closed time, restaurant id, table representation)
     *
     * This method has been automatically generated by intellij idea from duplicated loc
     *
     * @param tableService
     * @param preparedStatement
     * @throws SQLException
     */
    @Override
    public void prepareStatementForTableService(TableService tableService, PreparedStatement preparedStatement)
            throws SQLException {
        preparedStatement.setString(1, tableService.getOpenedDate().toString());
        preparedStatement.setString(2, tableService.getOpenedTime().toString());
        preparedStatement.setString(3, tableService.getClosedDate().toString());
        preparedStatement.setString(4, tableService.getClosedTime().toString());
        preparedStatement.setInt(5, tableService.getRestaurantId());
        preparedStatement.setString(6, tableService.getTableRepresentation());
    }
}
